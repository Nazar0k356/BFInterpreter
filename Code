.model tiny

.data
   endCode dw ?
   buff dw 10000 dup(?)
   code_buffer db 10000 dup(?)

.code
org 100h
   start:
   mov di, offset buff
   mov cx, 10000
   rep stosw

    mov cl, ds:[80h]
    mov bx, 81h
    add bx, cx
    mov byte ptr ds:[bx], 0

    mov ax, 3d00h ;Opening a file
    mov dx, 82h ;
    int 21h
    mov bx, ax 
 
    mov ah, 3fh ;Reading the file
    mov cx, 10000
    lea dx, code_buffer
    int 21h

    mov di, offset code_buffer
    add ax, di
    mov endcode, ax 

   mov bx, offset buff
   dec di
   mainLoop:
   inc di
   cmp di, endCode
   je fin

   mov al, [di] ;Putting symbol of the code into al
   cmp al, 2Bh ;Comparison with +
   je plus
   cmp al, 2Dh ;Comparison with -
   je minus
   cmp al, 3Ch ;Comparison with <
   je left
   cmp al, 3Eh ;Comparison with >
   je right
   cmp al, 2Ch ;Comparison with ,
   je coma
   cmp al, 2Eh ;Comparison with .
   je dot
   cmp al, 5Bh ;Comparison with [
   je lbracket    
   cmp al, 5Dh ;Comparison with ]  
   je rbracket
   jmp mainLoop ;This is a comment
   
   plus:
      mov al, [bx]
      inc al
      mov [bx], al
      jmp mainLoop
   minus:
      mov al, [bx]
      dec al
      mov [bx], al
      jmp mainLoop
   left:
      sub bx, 2
      jmp mainLoop
   right:
      add bx, 2
      jmp mainLoop
   coma:
      mov ah, 01h
      int 21h
      cmp al, 0dh ;Comparing to cr
      jne notCR
      mov al, 0ah
      notCR:
      mov [bx], al
      jmp mainLoop
   dot:
      mov ah, 02h
      mov dl, [bx]

      ;Checking for enter
      cmp dl, 0dh ;Comparing to cr
      je mainLoop
      cmp dl, 0ah
      jne notEnter
      mov dl, 0dh
      int 21h
      mov dl, 0ah
      notEnter:
      int 21h
      jmp mainLoop
   lbracket:
      push di
      jmp mainLoop
   rbracket:
      mov al, [bx]
      cmp al, 0
      jne notZeroRbracket
      dec sp
      jmp mainLoop  
    notZeroRbracket:
      pop di
      push di
      jmp mainLoop

   fin:  
   mov ah, 4ch 
   int 21h
end start